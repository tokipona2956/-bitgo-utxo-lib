var createHash = require('create-hash');
var crypto = require('crypto');
function ripemd160(buffer) {
    var hash = 'rmd160';
    var supportedHashes = crypto.getHashes();
    // some environments (electron) only support the long alias
    if (supportedHashes.indexOf(hash) === -1 && supportedHashes.indexOf('ripemd160') !== -1) {
        hash = 'ripemd160';
    }
    return createHash(hash).update(buffer).digest();
}
function sha1(buffer) {
    return createHash('sha1').update(buffer).digest();
}
function sha256(buffer) {
    return createHash('sha256').update(buffer).digest();
}
function hash160(buffer) {
    return ripemd160(sha256(buffer));
}
function hash256(buffer) {
    return sha256(sha256(buffer));
}
module.exports = {
    hash160: hash160,
    hash256: hash256,
    ripemd160: ripemd160,
    sha1: sha1,
    sha256: sha256
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3J5cHRvLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NyeXB0by5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFJLFVBQVUsR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUE7QUFDdkMsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFBO0FBRTlCLFNBQVMsU0FBUyxDQUFFLE1BQU07SUFDeEIsSUFBSSxJQUFJLEdBQUcsUUFBUSxDQUFBO0lBQ25CLElBQUksZUFBZSxHQUFHLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQTtJQUN4QywyREFBMkQ7SUFDM0QsSUFBSSxlQUFlLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLGVBQWUsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7UUFDdkYsSUFBSSxHQUFHLFdBQVcsQ0FBQTtLQUNuQjtJQUVELE9BQU8sVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtBQUNqRCxDQUFDO0FBRUQsU0FBUyxJQUFJLENBQUUsTUFBTTtJQUNuQixPQUFPLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUE7QUFDbkQsQ0FBQztBQUVELFNBQVMsTUFBTSxDQUFFLE1BQU07SUFDckIsT0FBTyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFBO0FBQ3JELENBQUM7QUFFRCxTQUFTLE9BQU8sQ0FBRSxNQUFNO0lBQ3RCLE9BQU8sU0FBUyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFBO0FBQ2xDLENBQUM7QUFFRCxTQUFTLE9BQU8sQ0FBRSxNQUFNO0lBQ3RCLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFBO0FBQy9CLENBQUM7QUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHO0lBQ2YsT0FBTyxFQUFFLE9BQU87SUFDaEIsT0FBTyxFQUFFLE9BQU87SUFDaEIsU0FBUyxFQUFFLFNBQVM7SUFDcEIsSUFBSSxFQUFFLElBQUk7SUFDVixNQUFNLEVBQUUsTUFBTTtDQUNmLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY3JlYXRlSGFzaCA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoJylcbnZhciBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKVxuXG5mdW5jdGlvbiByaXBlbWQxNjAgKGJ1ZmZlcikge1xuICB2YXIgaGFzaCA9ICdybWQxNjAnXG4gIHZhciBzdXBwb3J0ZWRIYXNoZXMgPSBjcnlwdG8uZ2V0SGFzaGVzKClcbiAgLy8gc29tZSBlbnZpcm9ubWVudHMgKGVsZWN0cm9uKSBvbmx5IHN1cHBvcnQgdGhlIGxvbmcgYWxpYXNcbiAgaWYgKHN1cHBvcnRlZEhhc2hlcy5pbmRleE9mKGhhc2gpID09PSAtMSAmJiBzdXBwb3J0ZWRIYXNoZXMuaW5kZXhPZigncmlwZW1kMTYwJykgIT09IC0xKSB7XG4gICAgaGFzaCA9ICdyaXBlbWQxNjAnXG4gIH1cblxuICByZXR1cm4gY3JlYXRlSGFzaChoYXNoKS51cGRhdGUoYnVmZmVyKS5kaWdlc3QoKVxufVxuXG5mdW5jdGlvbiBzaGExIChidWZmZXIpIHtcbiAgcmV0dXJuIGNyZWF0ZUhhc2goJ3NoYTEnKS51cGRhdGUoYnVmZmVyKS5kaWdlc3QoKVxufVxuXG5mdW5jdGlvbiBzaGEyNTYgKGJ1ZmZlcikge1xuICByZXR1cm4gY3JlYXRlSGFzaCgnc2hhMjU2JykudXBkYXRlKGJ1ZmZlcikuZGlnZXN0KClcbn1cblxuZnVuY3Rpb24gaGFzaDE2MCAoYnVmZmVyKSB7XG4gIHJldHVybiByaXBlbWQxNjAoc2hhMjU2KGJ1ZmZlcikpXG59XG5cbmZ1bmN0aW9uIGhhc2gyNTYgKGJ1ZmZlcikge1xuICByZXR1cm4gc2hhMjU2KHNoYTI1NihidWZmZXIpKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaGFzaDE2MDogaGFzaDE2MCxcbiAgaGFzaDI1NjogaGFzaDI1NixcbiAgcmlwZW1kMTYwOiByaXBlbWQxNjAsXG4gIHNoYTE6IHNoYTEsXG4gIHNoYTI1Njogc2hhMjU2XG59XG4iXX0=