var decompile = require('../script').decompile;
var multisig = require('./multisig');
var nullData = require('./nulldata');
var pubKey = require('./pubkey');
var pubKeyHash = require('./pubkeyhash');
var scriptHash = require('./scripthash');
var witnessPubKeyHash = require('./witnesspubkeyhash');
var witnessScriptHash = require('./witnessscripthash');
var witnessCommitment = require('./witnesscommitment');
var types = {
    MULTISIG: 'multisig',
    NONSTANDARD: 'nonstandard',
    NULLDATA: 'nulldata',
    P2PK: 'pubkey',
    P2PKH: 'pubkeyhash',
    P2SH: 'scripthash',
    P2WPKH: 'witnesspubkeyhash',
    P2WSH: 'witnessscripthash',
    WITNESS_COMMITMENT: 'witnesscommitment'
};
function classifyOutput(script) {
    if (witnessPubKeyHash.output.check(script))
        return types.P2WPKH;
    if (witnessScriptHash.output.check(script))
        return types.P2WSH;
    if (pubKeyHash.output.check(script))
        return types.P2PKH;
    if (scriptHash.output.check(script))
        return types.P2SH;
    // XXX: optimization, below functions .decompile before use
    var chunks = decompile(script);
    if (multisig.output.check(chunks))
        return types.MULTISIG;
    if (pubKey.output.check(chunks))
        return types.P2PK;
    if (witnessCommitment.output.check(chunks))
        return types.WITNESS_COMMITMENT;
    if (nullData.output.check(chunks))
        return types.NULLDATA;
    return types.NONSTANDARD;
}
function classifyInput(script, allowIncomplete) {
    // XXX: optimization, below functions .decompile before use
    var chunks = decompile(script);
    if (pubKeyHash.input.check(chunks))
        return types.P2PKH;
    if (scriptHash.input.check(chunks, allowIncomplete))
        return types.P2SH;
    if (multisig.input.check(chunks, allowIncomplete))
        return types.MULTISIG;
    if (pubKey.input.check(chunks))
        return types.P2PK;
    return types.NONSTANDARD;
}
function classifyWitness(script, allowIncomplete) {
    // XXX: optimization, below functions .decompile before use
    var chunks = decompile(script);
    if (witnessPubKeyHash.input.check(chunks))
        return types.P2WPKH;
    if (witnessScriptHash.input.check(chunks, allowIncomplete))
        return types.P2WSH;
    return types.NONSTANDARD;
}
module.exports = {
    classifyInput: classifyInput,
    classifyOutput: classifyOutput,
    classifyWitness: classifyWitness,
    multisig: multisig,
    nullData: nullData,
    pubKey: pubKey,
    pubKeyHash: pubKeyHash,
    scriptHash: scriptHash,
    witnessPubKeyHash: witnessPubKeyHash,
    witnessScriptHash: witnessScriptHash,
    witnessCommitment: witnessCommitment,
    types: types
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdGVtcGxhdGVzL2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUksU0FBUyxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxTQUFTLENBQUE7QUFDOUMsSUFBSSxRQUFRLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFBO0FBQ3BDLElBQUksUUFBUSxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQTtBQUNwQyxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUE7QUFDaEMsSUFBSSxVQUFVLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFBO0FBQ3hDLElBQUksVUFBVSxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQTtBQUN4QyxJQUFJLGlCQUFpQixHQUFHLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFBO0FBQ3RELElBQUksaUJBQWlCLEdBQUcsT0FBTyxDQUFDLHFCQUFxQixDQUFDLENBQUE7QUFDdEQsSUFBSSxpQkFBaUIsR0FBRyxPQUFPLENBQUMscUJBQXFCLENBQUMsQ0FBQTtBQUV0RCxJQUFJLEtBQUssR0FBRztJQUNWLFFBQVEsRUFBRSxVQUFVO0lBQ3BCLFdBQVcsRUFBRSxhQUFhO0lBQzFCLFFBQVEsRUFBRSxVQUFVO0lBQ3BCLElBQUksRUFBRSxRQUFRO0lBQ2QsS0FBSyxFQUFFLFlBQVk7SUFDbkIsSUFBSSxFQUFFLFlBQVk7SUFDbEIsTUFBTSxFQUFFLG1CQUFtQjtJQUMzQixLQUFLLEVBQUUsbUJBQW1CO0lBQzFCLGtCQUFrQixFQUFFLG1CQUFtQjtDQUN4QyxDQUFBO0FBRUQsU0FBUyxjQUFjLENBQUUsTUFBTTtJQUM3QixJQUFJLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDO1FBQUUsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFBO0lBQy9ELElBQUksaUJB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aXB0JykuZGVjb21waWxlXG52YXIgbXVsdGlzaWcgPSByZXF1aXJlKCcuL211bHRpc2lnJylcbnZhciBudWxsRGF0YSA9IHJlcXVpcmUoJy4vbnVsbGRhdGEnKVxudmFyIHB1YktleSA9IHJlcXVpcmUoJy4vcHVia2V5JylcbnZhciBwdWJLZXlIYXNoID0gcmVxdWlyZSgnLi9wdWJrZXloYXNoJylcbnZhciBzY3JpcHRIYXNoID0gcmVxdWlyZSgnLi9zY3JpcHRoYXNoJylcbnZhciB3aXRuZXNzUHViS2V5SGFzaCA9IHJlcXVpcmUoJy4vd2l0bmVzc3B1YmtleWhhc2gnKVxudmFyIHdpdG5lc3NTY3JpcHRIYXNoID0gcmVxdWlyZSgnLi93aXRuZXNzc2NyaXB0aGFzaCcpXG52YXIgd2l0bmVzc0NvbW1pdG1lbnQgPSByZXF1aXJlKCcuL3dpdG5lc3Njb21taXRtZW50JylcblxudmFyIHR5cGVzID0ge1xuICBNVUxUSVNJRzogJ211bHRpc2lnJyxcbiAgTk9OU1RBTkRBUkQ6ICdub25zdGFuZGFyZCcsXG4gIE5VTExEQVRBOiAnbnVsbGRhdGEnLFxuICBQMlBLOiAncHVia2V5JyxcbiAgUDJQS0g6ICdwdWJrZXloYXNoJyxcbiAgUDJTSDogJ3NjcmlwdGhhc2gnLFxuICBQMldQS0g6ICd3aXRuZXNzcHVia2V5aGFzaCcsXG4gIFAyV1NIOiAnd2l0bmVzc3NjcmlwdGhhc2gnLFxuICBXSVRORVNTX0NPTU1JVE1FTlQ6ICd3aXRuZXNzY29tbWl0bWVudCdcbn1cblxuZnVuY3Rpb24gY2xhc3NpZnlPdXRwdXQgKHNjcmlwdCkge1xuICBpZiAod2l0bmVzc1B1YktleUhhc2gub3V0cHV0LmNoZWNrKHNjcmlwdCkpIHJldHVybiB0eXBlcy5QMldQS0hcbiAgaWYgKHdpdG5lc3NTY3JpcHRIYXNoLm91dHB1dC5jaGVjayhzY3JpcHQpKSByZXR1cm4gdHlwZXMuUDJXU0hcbiAgaWYgKHB1YktleUhhc2gub3V0cHV0LmNoZWNrKHNjcmlwdCkpIHJldHVybiB0eXBlcy5QMlBLSFxuICBpZiAoc2NyaXB0SGFzaC5vdXRwdXQuY2hlY2soc2NyaXB0KSkgcmV0dXJuIHR5cGVzLlAyU0hcblxuICAvLyBYWFg6IG9wdGltaXphdGlvbiwgYmVsb3cgZnVuY3Rpb25zIC5kZWNvbXBpbGUgYmVmb3JlIHVzZVxuICB2YXIgY2h1bmtzID0gZGVjb21waWxlKHNjcmlwdClcbiAgaWYgKG11bHRpc2lnLm91dHB1dC5jaGVjayhjaHVua3MpKSByZXR1cm4gdHlwZXMuTVVMVElTSUdcbiAgaWYgKHB1YktleS5vdXRwdXQuY2hlY2soY2h1bmtzKSkgcmV0dXJuIHR5cGVzLlAyUEtcbiAgaWYgKHdpdG5lc3NDb21taXRtZW50Lm91dHB1dC5jaGVjayhjaHVua3MpKSByZXR1cm4gdHlwZXMuV0lUTkVTU19DT01NSVRNRU5UXG4gIGlmIChudWxsRGF0YS5vdXRwdXQuY2hlY2soY2h1bmtzKSkgcmV0dXJuIHR5cGVzLk5VTExEQVRBXG5cbiAgcmV0dXJuIHR5cGVzLk5PTlNUQU5EQVJEXG59XG5cbmZ1bmN0aW9uIGNsYXNzaWZ5SW5wdXQgKHNjcmlwdCwgYWxsb3dJbmNvbXBsZXRlKSB7XG4gIC8vIFhYWDogb3B0aW1pemF0aW9uLCBiZWxvdyBmdW5jdGlvbnMgLmRlY29tcGlsZSBiZWZvcmUgdXNlXG4gIHZhciBjaHVua3MgPSBkZWNvbXBpbGUoc2NyaXB0KVxuXG4gIGlmIChwdWJLZXlIYXNoLmlucHV0LmNoZWNrKGNodW5rcykpIHJldHVybiB0eXBlcy5QMlBLSFxuICBpZiAoc2NyaXB0SGFzaC5pbnB1dC5jaGVjayhjaHVua3MsIGFsbG93SW5jb21wbGV0ZSkpIHJldHVybiB0eXBlcy5QMlNIXG4gIGlmIChtdWx0aXNpZy5pbnB1dC5jaGVjayhjaHVua3MsIGFsbG93SW5jb21wbGV0ZSkpIHJldHVybiB0eXBlcy5NVUxUSVNJR1xuICBpZiAocHViS2V5LmlucHV0LmNoZWNrKGNodW5rcykpIHJldHVybiB0eXBlcy5QMlBLXG5cbiAgcmV0dXJuIHR5cGVzLk5PTlNUQU5EQVJEXG59XG5cbmZ1bmN0aW9uIGNsYXNzaWZ5V2l0bmVzcyAoc2NyaXB0LCBhbGxvd0luY29tcGxldGUpIHtcbiAgLy8gWFhYOiBvcHRpbWl6YXRpb24sIGJlbG93IGZ1bmN0aW9ucyAuZGVjb21waWxlIGJlZm9yZSB1c2VcbiAgdmFyIGNodW5rcyA9IGRlY29tcGlsZShzY3JpcHQpXG5cbiAgaWYgKHdpdG5lc3NQdWJLZXlIYXNoLmlucHV0LmNoZWNrKGNodW5rcykpIHJldHVybiB0eXBlcy5QMldQS0hcbiAgaWYgKHdpdG5lc3NTY3JpcHRIYXNoLmlucHV0LmNoZWNrKGNodW5rcywgYWxsb3dJbmNvbXBsZXRlKSkgcmV0dXJuIHR5cGVzLlAyV1NIXG5cbiAgcmV0dXJuIHR5cGVzLk5PTlNUQU5EQVJEXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjbGFzc2lmeUlucHV0OiBjbGFzc2lmeUlucHV0LFxuICBjbGFzc2lmeU91dHB1dDogY2xhc3NpZnlPdXRwdXQsXG4gIGNsYXNzaWZ5V2l0bmVzczogY2xhc3NpZnlXaXRuZXNzLFxuICBtdWx0aXNpZzogbXVsdGlzaWcsXG4gIG51bGxEYXRhOiBudWxsRGF0YSxcbiAgcHViS2V5OiBwdWJLZXksXG4gIHB1YktleUhhc2g6IHB1YktleUhhc2gsXG4gIHNjcmlwdEhhc2g6IHNjcmlwdEhhc2gsXG4gIHdpdG5lc3NQdWJLZXlIYXNoOiB3aXRuZXNzUHViS2V5SGFzaCxcbiAgd2l0bmVzc1NjcmlwdEhhc2g6IHdpdG5lc3NTY3JpcHRIYXNoLFxuICB3aXRuZXNzQ29tbWl0bWVudDogd2l0bmVzc0NvbW1pdG1lbnQsXG4gIHR5cGVzOiB0eXBlc1xufVxuIl19