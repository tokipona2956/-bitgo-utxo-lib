// OP_0 [signatures ...]
var Buffer = require('safe-buffer').Buffer;
var bscript = require('../../script');
var p2mso = require('./output');
var typeforce = require('typeforce');
var OPS = require('bitcoin-ops');
function partialSignature(value) {
    return value === OPS.OP_0 || bscript.isCanonicalSignature(value);
}
function check(script, allowIncomplete) {
    var chunks = bscript.decompile(script);
    if (chunks.length < 2)
        return false;
    if (chunks[0] !== OPS.OP_0)
        return false;
    if (allowIncomplete) {
        return chunks.slice(1).every(partialSignature);
    }
    return chunks.slice(1).every(bscript.isCanonicalSignature);
}
check.toJSON = function () { return 'multisig input'; };
var EMPTY_BUFFER = Buffer.allocUnsafe(0);
function encodeStack(signatures, scriptPubKey) {
    typeforce([partialSignature], signatures);
    if (scriptPubKey) {
        var scriptData = p2mso.decode(scriptPubKey);
        if (signatures.length < scriptData.m) {
            throw new TypeError('Not enough signatures provided');
        }
        if (signatures.length > scriptData.pubKeys.length) {
            throw new TypeError('Too many signatures provided');
        }
    }
    return [].concat(EMPTY_BUFFER, signatures.map(function (sig) {
        if (sig === OPS.OP_0) {
            return EMPTY_BUFFER;
        }
        return sig;
    }));
}
function encode(signatures, scriptPubKey) {
    return bscript.compile(encodeStack(signatures, scriptPubKey));
}
function decodeStack(stack, allowIncomplete) {
    typeforce(check, stack, allowIncomplete);
    return stack.slice(1);
}
function decode(buffer, allowIncomplete) {
    var stack = bscript.decompile(buffer);
    return decodeStack(stack, allowIncomplete);
}
module.exports = {
    check: check,
    decode: decode,
    decodeStack: decodeStack,
    encode: encode,
    encodeStack: encodeStack
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvdGVtcGxhdGVzL211bHRpc2lnL2lucHV0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdCQUF3QjtBQUV4QixJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsTUFBTSxDQUFBO0FBQzFDLElBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQTtBQUNyQyxJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUE7QUFDL0IsSUFBSSxTQUFTLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFBO0FBQ3BDLElBQUksR0FBRyxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQTtBQUVoQyxTQUFTLGdCQUFnQixDQUFFLEtBQUs7SUFDOUIsT0FBTyxLQUFLLEtBQUssR0FBRyxDQUFDLElBQUksSUFBSSxPQUFPLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLENBQUE7QUFDbEUsQ0FBQztBQUVELFNBQVMsS0FBSyxDQUFFLE1BQU0sRUFBRSxlQUFlO0lBQ3JDLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDdEMsSUFBSSxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUM7UUFBRSxPQUFPLEtBQUssQ0FBQTtJQUNuQyxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsSUFBSTtRQUFFLE9BQU8sS0FBSyxDQUFBO0lBRXhDLElBQUksZUFBZSxFQUFFO1FBQ25CLE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQTtLQUMvQztJQUVELE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUE7QUFDNUQsQ0FBQztBQUNELEtBQUssQ0FBQyxNQUFNLEdBQUcsY0FBYyxPQUFPLGdCQUFnQixDQUFBLENBQUMsQ0FBQyxDQUFBO0FBRXRELElBQUksWUFBWSxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFFeEMsU0FBUyxXQUFXLENBQUUsVUFBVSxFQUFFLFlBQVk7SUFDNUMsU0FBUyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQTtJQUV6QyxJQUFJLFlBQVksRUFBRTtRQUNoQixJQUFJLFVBQVUsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFBO1FBRTNDLElBQUksVUFBVSxDQUFDLE1BQU0sR0FBRyxVQUFVLENBQUMsQ0FBQyxFQUFFO1lBQ3BDLE1BQU0sSUFBSSxTQUFTLENBQUMsZ0NBQWdDLENBQUMsQ0FBQTtTQUN0RDtRQUVELElBQUksVUFBVSxDQUFDLE1BQU0sR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRTtZQUNqRCxNQUFNLElBQUksU0FBUyxDQUFDLDhCQUE4QixDQUFDLENBQUE7U0FDcEQ7S0FDRjtJQUVELE9BQU8sRUFBRSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsVUFBVSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEdBQUc7UUFDekQsSUFBSSxHQUFHLEtBQUssR0FBRyxDQUFDLElBQUksRUFBRTtZQUNwQixPQUFPLFlBQVksQ0FBQTtTQUNwQjtRQUNELE9BQU8sR0FBRyxDQUFBO0lBQ1osQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUNMLENBQUM7QUFFRCxTQUFTLE1BQU0sQ0FBRSxVQUFVLEVBQUUsWUFBWTtJQUN2QyxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLFVBQVUsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFBO0FBQy9ELENBQUM7QUFFRCxTQUFTLFdBQVcsQ0FBRSxLQUFLLEVBQUUsZUFBZTtJQUMxQyxTQUFTLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxlQUFlLENBQUMsQ0FBQTtJQUN4QyxPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDdkIsQ0FBQztBQUVELFNBQVMsTUFBTSxDQUFFLE1BQU0sRUFBRSxlQUFlO0lBQ3RDLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDckMsT0FBTyxXQUFXLENBQUMsS0FBSyxFQUFFLGVBQWUsQ0FBQyxDQUFBO0FBQzVDLENBQUM7QUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHO0lBQ2YsS0FBSyxFQUFFLEtBQUs7SUFDWixNQUFNLEVBQUUsTUFBTTtJQUNkLFdBQVcsRUFBRSxXQUFXO0lBQ3hCLE1BQU0sRUFBRSxNQUFNO0lBQ2QsV0FBVyxFQUFFLFdBQVc7Q0FDekIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIE9QXzAgW3NpZ25hdHVyZXMgLi4uXVxuXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBic2NyaXB0ID0gcmVxdWlyZSgnLi4vLi4vc2NyaXB0JylcbnZhciBwMm1zbyA9IHJlcXVpcmUoJy4vb3V0cHV0JylcbnZhciB0eXBlZm9yY2UgPSByZXF1aXJlKCd0eXBlZm9yY2UnKVxudmFyIE9QUyA9IHJlcXVpcmUoJ2JpdGNvaW4tb3BzJylcblxuZnVuY3Rpb24gcGFydGlhbFNpZ25hdHVyZSAodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09PSBPUFMuT1BfMCB8fCBic2NyaXB0LmlzQ2Fub25pY2FsU2lnbmF0dXJlKHZhbHVlKVxufVxuXG5mdW5jdGlvbiBjaGVjayAoc2NyaXB0LCBhbGxvd0luY29tcGxldGUpIHtcbiAgdmFyIGNodW5rcyA9IGJzY3JpcHQuZGVjb21waWxlKHNjcmlwdClcbiAgaWYgKGNodW5rcy5sZW5ndGggPCAyKSByZXR1cm4gZmFsc2VcbiAgaWYgKGNodW5rc1swXSAhPT0gT1BTLk9QXzApIHJldHVybiBmYWxzZVxuXG4gIGlmIChhbGxvd0luY29tcGxldGUpIHtcbiAgICByZXR1cm4gY2h1bmtzLnNsaWNlKDEpLmV2ZXJ5KHBhcnRpYWxTaWduYXR1cmUpXG4gIH1cblxuICByZXR1cm4gY2h1bmtzLnNsaWNlKDEpLmV2ZXJ5KGJzY3JpcHQuaXNDYW5vbmljYWxTaWduYXR1cmUpXG59XG5jaGVjay50b0pTT04gPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnbXVsdGlzaWcgaW5wdXQnIH1cblxudmFyIEVNUFRZX0JVRkZFUiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKVxuXG5mdW5jdGlvbiBlbmNvZGVTdGFjayAoc2lnbmF0dXJlcywgc2NyaXB0UHViS2V5KSB7XG4gIHR5cGVmb3JjZShbcGFydGlhbFNpZ25hdHVyZV0sIHNpZ25hdHVyZXMpXG5cbiAgaWYgKHNjcmlwdFB1YktleSkge1xuICAgIHZhciBzY3JpcHREYXRhID0gcDJtc28uZGVjb2RlKHNjcmlwdFB1YktleSlcblxuICAgIGlmIChzaWduYXR1cmVzLmxlbmd0aCA8IHNjcmlwdERhdGEubSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTm90IGVub3VnaCBzaWduYXR1cmVzIHByb3ZpZGVkJylcbiAgICB9XG5cbiAgICBpZiAoc2lnbmF0dXJlcy5sZW5ndGggPiBzY3JpcHREYXRhLnB1YktleXMubGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUb28gbWFueSBzaWduYXR1cmVzIHByb3ZpZGVkJylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gW10uY29uY2F0KEVNUFRZX0JVRkZFUiwgc2lnbmF0dXJlcy5tYXAoZnVuY3Rpb24gKHNpZykge1xuICAgIGlmIChzaWcgPT09IE9QUy5PUF8wKSB7XG4gICAgICByZXR1cm4gRU1QVFlfQlVGRkVSXG4gICAgfVxuICAgIHJldHVybiBzaWdcbiAgfSkpXG59XG5cbmZ1bmN0aW9uIGVuY29kZSAoc2lnbmF0dXJlcywgc2NyaXB0UHViS2V5KSB7XG4gIHJldHVybiBic2NyaXB0LmNvbXBpbGUoZW5jb2RlU3RhY2soc2lnbmF0dXJlcywgc2NyaXB0UHViS2V5KSlcbn1cblxuZnVuY3Rpb24gZGVjb2RlU3RhY2sgKHN0YWNrLCBhbGxvd0luY29tcGxldGUpIHtcbiAgdHlwZWZvcmNlKGNoZWNrLCBzdGFjaywgYWxsb3dJbmNvbXBsZXRlKVxuICByZXR1cm4gc3RhY2suc2xpY2UoMSlcbn1cblxuZnVuY3Rpb24gZGVjb2RlIChidWZmZXIsIGFsbG93SW5jb21wbGV0ZSkge1xuICB2YXIgc3RhY2sgPSBic2NyaXB0LmRlY29tcGlsZShidWZmZXIpXG4gIHJldHVybiBkZWNvZGVTdGFjayhzdGFjaywgYWxsb3dJbmNvbXBsZXRlKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY2hlY2s6IGNoZWNrLFxuICBkZWNvZGU6IGRlY29kZSxcbiAgZGVjb2RlU3RhY2s6IGRlY29kZVN0YWNrLFxuICBlbmNvZGU6IGVuY29kZSxcbiAgZW5jb2RlU3RhY2s6IGVuY29kZVN0YWNrXG59XG4iXX0=