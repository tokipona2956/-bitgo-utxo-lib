// <scriptSig> {serialized scriptPubKey script}
var Buffer = require('safe-buffer').Buffer;
var bscript = require('../../script');
var typeforce = require('typeforce');
var p2ms = require('../multisig/');
var p2pk = require('../pubkey/');
var p2pkh = require('../pubkeyhash/');
var p2wpkho = require('../witnesspubkeyhash/output');
var p2wsho = require('../witnessscripthash/output');
function check(script, allowIncomplete) {
    var chunks = bscript.decompile(script);
    if (chunks.length < 1)
        return false;
    var lastChunk = chunks[chunks.length - 1];
    if (!Buffer.isBuffer(lastChunk))
        return false;
    var scriptSigChunks = bscript.decompile(bscript.compile(chunks.slice(0, -1)));
    var redeemScriptChunks = bscript.decompile(lastChunk);
    // is redeemScript a valid script?
    if (redeemScriptChunks.length === 0)
        return false;
    // is redeemScriptSig push only?
    if (!bscript.isPushOnly(scriptSigChunks))
        return false;
    // is witness?
    if (chunks.length === 1) {
        return p2wsho.check(redeemScriptChunks) ||
            p2wpkho.check(redeemScriptChunks);
    }
    // match types
    if (p2pkh.input.check(scriptSigChunks) &&
        p2pkh.output.check(redeemScriptChunks))
        return true;
    if (p2ms.input.check(scriptSigChunks, allowIncomplete) &&
        p2ms.output.check(redeemScriptChunks))
        return true;
    if (p2pk.input.check(scriptSigChunks) &&
        p2pk.output.check(redeemScriptChunks))
        return true;
    return false;
}
check.toJSON = function () { return 'scriptHash input'; };
function encodeStack(redeemScriptStack, redeemScript) {
    var serializedScriptPubKey = bscript.compile(redeemScript);
    return [].concat(redeemScriptStack, serializedScriptPubKey);
}
function encode(redeemScriptSig, redeemScript) {
    var redeemScriptStack = bscript.decompile(redeemScriptSig);
    return bscript.compile(encodeStack(redeemScriptStack, redeemScript));
}
function decodeStack(stack) {
    typeforce(check, stack);
    return {
        redeemScriptStack: stack.slice(0, -1),
        redeemScript: stack[stack.length - 1]
    };
}
function decode(buffer) {
    var stack = bscript.decompile(buffer);
    var result = decodeStack(stack);
    result.redeemScriptSig = bscript.compile(result.redeemScriptStack);
    delete result.redeemScriptStack;
    return result;
}
module.exports = {
    check: check,
    decode: decode,
    decodeStack: decodeStack,
    encode: encode,
    encodeStack: encodeStack
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvdGVtcGxhdGVzL3NjcmlwdGhhc2gvaW5wdXQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsK0NBQStDO0FBRS9DLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxNQUFNLENBQUE7QUFDMUMsSUFBSSxPQUFPLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFBO0FBQ3JDLElBQUksU0FBUyxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQTtBQUVwQyxJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUE7QUFDbEMsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFBO0FBQ2hDLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFBO0FBQ3JDLElBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyw2QkFBNkIsQ0FBQyxDQUFBO0FBQ3BELElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyw2QkFBNkIsQ0FBQyxDQUFBO0FBRW5ELFNBQVMsS0FBSyxDQUFFLE1BQU0sRUFBRSxlQUFlO0lBQ3JDLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDdEMsSUFBSSxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUM7UUFBRSxPQUFPLEtBQUssQ0FBQTtJQUVuQyxJQUFJLFNBQVMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQTtJQUN6QyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUM7UUFBRSxPQUFPLEtBQUssQ0FBQTtJQUU3QyxJQUFJLGVBQWUsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FB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ekIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxzY3JpcHRTaWc+IHtzZXJpYWxpemVkIHNjcmlwdFB1YktleSBzY3JpcHR9XG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIGJzY3JpcHQgPSByZXF1aXJlKCcuLi8uLi9zY3JpcHQnKVxudmFyIHR5cGVmb3JjZSA9IHJlcXVpcmUoJ3R5cGVmb3JjZScpXG5cbnZhciBwMm1zID0gcmVxdWlyZSgnLi4vbXVsdGlzaWcvJylcbnZhciBwMnBrID0gcmVxdWlyZSgnLi4vcHVia2V5LycpXG52YXIgcDJwa2ggPSByZXF1aXJlKCcuLi9wdWJrZXloYXNoLycpXG52YXIgcDJ3cGtobyA9IHJlcXVpcmUoJy4uL3dpdG5lc3NwdWJrZXloYXNoL291dHB1dCcpXG52YXIgcDJ3c2hvID0gcmVxdWlyZSgnLi4vd2l0bmVzc3NjcmlwdGhhc2gvb3V0cHV0JylcblxuZnVuY3Rpb24gY2hlY2sgKHNjcmlwdCwgYWxsb3dJbmNvbXBsZXRlKSB7XG4gIHZhciBjaHVua3MgPSBic2NyaXB0LmRlY29tcGlsZShzY3JpcHQpXG4gIGlmIChjaHVua3MubGVuZ3RoIDwgMSkgcmV0dXJuIGZhbHNlXG5cbiAgdmFyIGxhc3RDaHVuayA9IGNodW5rc1tjaHVua3MubGVuZ3RoIC0gMV1cbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIobGFzdENodW5rKSkgcmV0dXJuIGZhbHNlXG5cbiAgdmFyIHNjcmlwdFNpZ0NodW5rcyA9IGJzY3JpcHQuZGVjb21waWxlKGJzY3JpcHQuY29tcGlsZShjaHVua3Muc2xpY2UoMCwgLTEpKSlcbiAgdmFyIHJlZGVlbVNjcmlwdENodW5rcyA9IGJzY3JpcHQuZGVjb21waWxlKGxhc3RDaHVuaylcblxuICAvLyBpcyByZWRlZW1TY3JpcHQgYSB2YWxpZCBzY3JpcHQ/XG4gIGlmIChyZWRlZW1TY3JpcHRDaHVua3MubGVuZ3RoID09PSAwKSByZXR1cm4gZmFsc2VcblxuICAvLyBpcyByZWRlZW1TY3JpcHRTaWcgcHVzaCBvbmx5P1xuICBpZiAoIWJzY3JpcHQuaXNQdXNoT25seShzY3JpcHRTaWdDaHVua3MpKSByZXR1cm4gZmFsc2VcblxuICAvLyBpcyB3aXRuZXNzP1xuICBpZiAoY2h1bmtzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBwMndzaG8uY2hlY2socmVkZWVtU2NyaXB0Q2h1bmtzKSB8fFxuICAgICAgcDJ3cGtoby5jaGVjayhyZWRlZW1TY3JpcHRDaHVua3MpXG4gIH1cblxuICAvLyBtYXRjaCB0eXBlc1xuICBpZiAocDJwa2guaW5wdXQuY2hlY2soc2NyaXB0U2lnQ2h1bmtzKSAmJlxuICAgIHAycGtoLm91dHB1dC5jaGVjayhyZWRlZW1TY3JpcHRDaHVua3MpKSByZXR1cm4gdHJ1ZVxuXG4gIGlmIChwMm1zLmlucHV0LmNoZWNrKHNjcmlwdFNpZ0NodW5rcywgYWxsb3dJbmNvbXBsZXRlKSAmJlxuICAgIHAybXMub3V0cHV0LmNoZWNrKHJlZGVlbVNjcmlwdENodW5rcykpIHJldHVybiB0cnVlXG5cbiAgaWYgKHAycGsuaW5wdXQuY2hlY2soc2NyaXB0U2lnQ2h1bmtzKSAmJlxuICAgIHAycGsub3V0cHV0LmNoZWNrKHJlZGVlbVNjcmlwdENodW5rcykpIHJldHVybiB0cnVlXG5cbiAgcmV0dXJuIGZhbHNlXG59XG5jaGVjay50b0pTT04gPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnc2NyaXB0SGFzaCBpbnB1dCcgfVxuXG5mdW5jdGlvbiBlbmNvZGVTdGFjayAocmVkZWVtU2NyaXB0U3RhY2ssIHJlZGVlbVNjcmlwdCkge1xuICB2YXIgc2VyaWFsaXplZFNjcmlwdFB1YktleSA9IGJzY3JpcHQuY29tcGlsZShyZWRlZW1TY3JpcHQpXG5cbiAgcmV0dXJuIFtdLmNvbmNhdChyZWRlZW1TY3JpcHRTdGFjaywgc2VyaWFsaXplZFNjcmlwdFB1YktleSlcbn1cblxuZnVuY3Rpb24gZW5jb2RlIChyZWRlZW1TY3JpcHRTaWcsIHJlZGVlbVNjcmlwdCkge1xuICB2YXIgcmVkZWVtU2NyaXB0U3RhY2sgPSBic2NyaXB0LmRlY29tcGlsZShyZWRlZW1TY3JpcHRTaWcpXG5cbiAgcmV0dXJuIGJzY3JpcHQuY29tcGlsZShlbmNvZGVTdGFjayhyZWRlZW1TY3JpcHRTdGFjaywgcmVkZWVtU2NyaXB0KSlcbn1cblxuZnVuY3Rpb24gZGVjb2RlU3RhY2sgKHN0YWNrKSB7XG4gIHR5cGVmb3JjZShjaGVjaywgc3RhY2spXG5cbiAgcmV0dXJuIHtcbiAgICByZWRlZW1TY3JpcHRTdGFjazogc3RhY2suc2xpY2UoMCwgLTEpLFxuICAgIHJlZGVlbVNjcmlwdDogc3RhY2tbc3RhY2subGVuZ3RoIC0gMV1cbiAgfVxufVxuXG5mdW5jdGlvbiBkZWNvZGUgKGJ1ZmZlcikge1xuICB2YXIgc3RhY2sgPSBic2NyaXB0LmRlY29tcGlsZShidWZmZXIpXG4gIHZhciByZXN1bHQgPSBkZWNvZGVTdGFjayhzdGFjaylcbiAgcmVzdWx0LnJlZGVlbVNjcmlwdFNpZyA9IGJzY3JpcHQuY29tcGlsZShyZXN1bHQucmVkZWVtU2NyaXB0U3RhY2spXG4gIGRlbGV0ZSByZXN1bHQucmVkZWVtU2NyaXB0U3RhY2tcbiAgcmV0dXJuIHJlc3VsdFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY2hlY2s6IGNoZWNrLFxuICBkZWNvZGU6IGRlY29kZSxcbiAgZGVjb2RlU3RhY2s6IGRlY29kZVN0YWNrLFxuICBlbmNvZGU6IGVuY29kZSxcbiAgZW5jb2RlU3RhY2s6IGVuY29kZVN0YWNrXG59XG4iXX0=