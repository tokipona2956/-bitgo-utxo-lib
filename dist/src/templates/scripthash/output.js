// OP_HASH160 {scriptHash} OP_EQUAL
var bscript = require('../../script');
var types = require('../../types');
var typeforce = require('typeforce');
var OPS = require('bitcoin-ops');
function check(script) {
    var buffer = bscript.compile(script);
    return buffer.length === 23 &&
        buffer[0] === OPS.OP_HASH160 &&
        buffer[1] === 0x14 &&
        buffer[22] === OPS.OP_EQUAL;
}
check.toJSON = function () { return 'scriptHash output'; };
function encode(scriptHash) {
    typeforce(types.Hash160bit, scriptHash);
    return bscript.compile([OPS.OP_HASH160, scriptHash, OPS.OP_EQUAL]);
}
function decode(buffer) {
    typeforce(check, buffer);
    return buffer.slice(2, 22);
}
module.exports = {
    check: check,
    decode: decode,
    encode: encode
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3V0cHV0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3RlbXBsYXRlcy9zY3JpcHRoYXNoL291dHB1dC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxtQ0FBbUM7QUFFbkMsSUFBSSxPQUFPLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFBO0FBQ3JDLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQTtBQUNsQyxJQUFJLFNBQVMsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUE7QUFDcEMsSUFBSSxHQUFHLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFBO0FBRWhDLFNBQVMsS0FBSyxDQUFFLE1BQU07SUFDcEIsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUVwQyxPQUFPLE1BQU0sQ0FBQyxNQUFNLEtBQUssRUFBRTtRQUN6QixNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLFVBQVU7UUFDNUIsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUk7UUFDbEIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxRQUFRLENBQUE7QUFDL0IsQ0FBQztBQUNELEtBQUssQ0FBQyxNQUFNLEdBQUcsY0FBYyxPQUFPLG1CQUFtQixDQUFBLENBQUMsQ0FBQyxDQUFBO0FBRXpELFNBQVMsTUFBTSxDQUFFLFVBQVU7SUFDekIsU0FBUyxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsVUFBVSxDQUFDLENBQUE7SUFFdkMsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxVQUFVLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUE7QUFDcEUsQ0FBQztBQUVELFNBQVMsTUFBTSxDQUFFLE1BQU07SUFDckIsU0FBUyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQTtJQUV4QixPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFBO0FBQzVCLENBQUM7QUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHO0lBQ2YsS0FBSyxFQUFFLEtBQUs7SUFDWixNQUFNLEVBQUUsTUFBTTtJQUNkLE1BQU0sRUFBRSxNQUFNO0NBQ2YsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIE9QX0hBU0gxNjAge3NjcmlwdEhhc2h9IE9QX0VRVUFMXG5cbnZhciBic2NyaXB0ID0gcmVxdWlyZSgnLi4vLi4vc2NyaXB0JylcbnZhciB0eXBlcyA9IHJlcXVpcmUoJy4uLy4uL3R5cGVzJylcbnZhciB0eXBlZm9yY2UgPSByZXF1aXJlKCd0eXBlZm9yY2UnKVxudmFyIE9QUyA9IHJlcXVpcmUoJ2JpdGNvaW4tb3BzJylcblxuZnVuY3Rpb24gY2hlY2sgKHNjcmlwdCkge1xuICB2YXIgYnVmZmVyID0gYnNjcmlwdC5jb21waWxlKHNjcmlwdClcblxuICByZXR1cm4gYnVmZmVyLmxlbmd0aCA9PT0gMjMgJiZcbiAgICBidWZmZXJbMF0gPT09IE9QUy5PUF9IQVNIMTYwICYmXG4gICAgYnVmZmVyWzFdID09PSAweDE0ICYmXG4gICAgYnVmZmVyWzIyXSA9PT0gT1BTLk9QX0VRVUFMXG59XG5jaGVjay50b0pTT04gPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnc2NyaXB0SGFzaCBvdXRwdXQnIH1cblxuZnVuY3Rpb24gZW5jb2RlIChzY3JpcHRIYXNoKSB7XG4gIHR5cGVmb3JjZSh0eXBlcy5IYXNoMTYwYml0LCBzY3JpcHRIYXNoKVxuXG4gIHJldHVybiBic2NyaXB0LmNvbXBpbGUoW09QUy5PUF9IQVNIMTYwLCBzY3JpcHRIYXNoLCBPUFMuT1BfRVFVQUxdKVxufVxuXG5mdW5jdGlvbiBkZWNvZGUgKGJ1ZmZlcikge1xuICB0eXBlZm9yY2UoY2hlY2ssIGJ1ZmZlcilcblxuICByZXR1cm4gYnVmZmVyLnNsaWNlKDIsIDIyKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY2hlY2s6IGNoZWNrLFxuICBkZWNvZGU6IGRlY29kZSxcbiAgZW5jb2RlOiBlbmNvZGVcbn1cbiJdfQ==