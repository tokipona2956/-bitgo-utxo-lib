var typeforce = require('typeforce');
var UINT31_MAX = Math.pow(2, 31) - 1;
function UInt31(value) {
    return typeforce.UInt32(value) && value <= UINT31_MAX;
}
function BIP32Path(value) {
    return typeforce.String(value) && value.match(/^(m\/)?(\d+'?\/)*\d+'?$/);
}
BIP32Path.toJSON = function () { return 'BIP32 derivation path'; };
var SATOSHI_MAX = 21 * 1e14;
function Satoshi(value) {
    return typeforce.UInt53(value) && value <= SATOSHI_MAX;
}
// external dependent types
var BigInt = typeforce.quacksLike('BigInteger');
var ECPoint = typeforce.quacksLike('Point');
// exposed, external API
var ECSignature = typeforce.compile({ r: BigInt, s: BigInt });
var networkVersion = typeforce.oneOf(typeforce.UInt8, typeforce.UInt16);
var Network = typeforce.compile({
    messagePrefix: typeforce.oneOf(typeforce.Buffer, typeforce.String),
    bip32: {
        public: typeforce.UInt32,
        private: typeforce.UInt32
    },
    pubKeyHash: networkVersion,
    scriptHash: networkVersion,
    wif: typeforce.UInt8
});
// extend typeforce types with ours
var types = {
    BigInt: BigInt,
    BIP32Path: BIP32Path,
    Buffer256bit: typeforce.BufferN(32),
    ECPoint: ECPoint,
    ECSignature: ECSignature,
    Hash160bit: typeforce.BufferN(20),
    Hash256bit: typeforce.BufferN(32),
    Network: Network,
    Satoshi: Satoshi,
    UInt31: UInt31,
    NetworkVersion: networkVersion
};
for (var typeName in typeforce) {
    types[typeName] = typeforce[typeName];
}
module.exports = types;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdHlwZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSSxTQUFTLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFBO0FBRXBDLElBQUksVUFBVSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQTtBQUNwQyxTQUFTLE1BQU0sQ0FBRSxLQUFLO0lBQ3BCLE9BQU8sU0FBUyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLElBQUksVUFBVSxDQUFBO0FBQ3ZELENBQUM7QUFFRCxTQUFTLFNBQVMsQ0FBRSxLQUFLO0lBQ3ZCLE9BQU8sU0FBUyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUE7QUFDMUUsQ0FBQztBQUNELFNBQVMsQ0FBQyxNQUFNLEdBQUcsY0FBYyxPQUFPLHVCQUF1QixDQUFBLENBQUMsQ0FBQyxDQUFBO0FBRWpFLElBQUksV0FBVyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUE7QUFDM0IsU0FBUyxPQUFPLENBQUUsS0FBSztJQUNyQixPQUFPLFNBQVMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxJQUFJLFdBQVcsQ0FBQTtBQUN4RCxDQUFDO0FBRUQsMkJBQTJCO0FBQzNCLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUE7QUFDL0MsSUFBSSxPQUFPLEdBQUcsU0FBUyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQTtBQUUzQyx3QkFBd0I7QUFDeEIsSUFBSSxXQUFXLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUE7QUFDN0QsSUFBSSxjQUFjLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUN2RSxJQUFJLE9BQU8sR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQzlCLGFBQWEsRUFBRSxTQUFTLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBQztJQUNsRSxLQUFLLEVBQUU7UUFDTCxNQUFNLEVBQUUsU0FBUyxDQUFDLE1BQU07UUFDeEIsT0FBTyxFQUFFLFNBQVMsQ0FBQyxNQUFNO0tBQzFCO0lBQ0QsVUFBVSxFQUFFLGNBQWM7SUFDMUIsVUFBVSxFQUFFLGNBQWM7SUFDMUIsR0FBRyxFQUFFLFNBQVMsQ0FBQyxLQUFLO0NBQ3JCLENBQUMsQ0FBQTtBQUVGLG1DQUFtQztBQUNuQyxJQUFJLEtBQUssR0FBRztJQUNWLE1BQU0sRUFBRSxNQUFNO0lBQ2QsU0FBUyxFQUFFLFNBQVM7SUFDcEIsWUFBWSxFQUFFLFNBQVMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO0lBQ25DLE9BQU8sRUFBRSxPQUFPO0lBQ2hCLFdBQVcsRUFBRSxXQUFXO0lBQ3hCLFVBQVUsRUFBRSxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztJQUNqQyxVQUFVLEVBQUUsU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7SUFDakMsT0FBTyxFQUFFLE9BQU87SUFDaEIsT0FBTyxFQUFFLE9BQU87SUFDaEIsTUFBTSxFQUFFLE1BQU07SUFDZCxjQUFjLEVBQUUsY0FBYztDQUMvQixDQUFBO0FBRUQsS0FBSyxJQUFJLFFBQVEsSUFBSSxTQUFTLEVBQUU7SUFDOUIsS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQTtDQUN0QztBQUVELE1BQU0sQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHR5cGVmb3JjZSA9IHJlcXVpcmUoJ3R5cGVmb3JjZScpXG5cbnZhciBVSU5UMzFfTUFYID0gTWF0aC5wb3coMiwgMzEpIC0gMVxuZnVuY3Rpb24gVUludDMxICh2YWx1ZSkge1xuICByZXR1cm4gdHlwZWZvcmNlLlVJbnQzMih2YWx1ZSkgJiYgdmFsdWUgPD0gVUlOVDMxX01BWFxufVxuXG5mdW5jdGlvbiBCSVAzMlBhdGggKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlZm9yY2UuU3RyaW5nKHZhbHVlKSAmJiB2YWx1ZS5tYXRjaCgvXihtXFwvKT8oXFxkKyc/XFwvKSpcXGQrJz8kLylcbn1cbkJJUDMyUGF0aC50b0pTT04gPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnQklQMzIgZGVyaXZhdGlvbiBwYXRoJyB9XG5cbnZhciBTQVRPU0hJX01BWCA9IDIxICogMWUxNFxuZnVuY3Rpb24gU2F0b3NoaSAodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVmb3JjZS5VSW50NTModmFsdWUpICYmIHZhbHVlIDw9IFNBVE9TSElfTUFYXG59XG5cbi8vIGV4dGVybmFsIGRlcGVuZGVudCB0eXBlc1xudmFyIEJpZ0ludCA9IHR5cGVmb3JjZS5xdWFja3NMaWtlKCdCaWdJbnRlZ2VyJylcbnZhciBFQ1BvaW50ID0gdHlwZWZvcmNlLnF1YWNrc0xpa2UoJ1BvaW50JylcblxuLy8gZXhwb3NlZCwgZXh0ZXJuYWwgQVBJXG52YXIgRUNTaWduYXR1cmUgPSB0eXBlZm9yY2UuY29tcGlsZSh7IHI6IEJpZ0ludCwgczogQmlnSW50IH0pXG52YXIgbmV0d29ya1ZlcnNpb24gPSB0eXBlZm9yY2Uub25lT2YodHlwZWZvcmNlLlVJbnQ4LCB0eXBlZm9yY2UuVUludDE2KVxudmFyIE5ldHdvcmsgPSB0eXBlZm9yY2UuY29tcGlsZSh7XG4gIG1lc3NhZ2VQcmVmaXg6IHR5cGVmb3JjZS5vbmVPZih0eXBlZm9yY2UuQnVmZmVyLCB0eXBlZm9yY2UuU3RyaW5nKSxcbiAgYmlwMzI6IHtcbiAgICBwdWJsaWM6IHR5cGVmb3JjZS5VSW50MzIsXG4gICAgcHJpdmF0ZTogdHlwZWZvcmNlLlVJbnQzMlxuICB9LFxuICBwdWJLZXlIYXNoOiBuZXR3b3JrVmVyc2lvbixcbiAgc2NyaXB0SGFzaDogbmV0d29ya1ZlcnNpb24sXG4gIHdpZjogdHlwZWZvcmNlLlVJbnQ4XG59KVxuXG4vLyBleHRlbmQgdHlwZWZvcmNlIHR5cGVzIHdpdGggb3Vyc1xudmFyIHR5cGVzID0ge1xuICBCaWdJbnQ6IEJpZ0ludCxcbiAgQklQMzJQYXRoOiBCSVAzMlBhdGgsXG4gIEJ1ZmZlcjI1NmJpdDogdHlwZWZvcmNlLkJ1ZmZlck4oMzIpLFxuICBFQ1BvaW50OiBFQ1BvaW50LFxuICBFQ1NpZ25hdHVyZTogRUNTaWduYXR1cmUsXG4gIEhhc2gxNjBiaXQ6IHR5cGVmb3JjZS5CdWZmZXJOKDIwKSxcbiAgSGFzaDI1NmJpdDogdHlwZWZvcmNlLkJ1ZmZlck4oMzIpLFxuICBOZXR3b3JrOiBOZXR3b3JrLFxuICBTYXRvc2hpOiBTYXRvc2hpLFxuICBVSW50MzE6IFVJbnQzMSxcbiAgTmV0d29ya1ZlcnNpb246IG5ldHdvcmtWZXJzaW9uXG59XG5cbmZvciAodmFyIHR5cGVOYW1lIGluIHR5cGVmb3JjZSkge1xuICB0eXBlc1t0eXBlTmFtZV0gPSB0eXBlZm9yY2VbdHlwZU5hbWVdXG59XG5cbm1vZHVsZS5leHBvcnRzID0gdHlwZXNcbiJdfQ==